{"version":3,"sources":["components/createNewTask/NewTaskForm.js","components/boardBody/NewBoardForm.js","components/boardBody/taskButtons/MoveTaskButtonLeft.js","components/boardBody/taskButtons/MoveTaskButtonRight.js","components/boardBody/taskButtons/MoveTaskButtonDown.js","components/boardBody/taskButtons/MoveTaskButtonUp.js","components/boardBody/taskButtons/DeleteTaskButton.js","components/boardBody/EditTaskForm.js","components/boardBody/SingleTaskCard.js","components/boardBody/SingleBoard.js","components/boardBody/BoardCollection.js","App.js","serviceWorker.js","index.js"],"names":["NewTaskForm","props","className","useState","createTaskModal","setCreateTaskModal","task","setTask","toggleModal","onTaskChange","ev","target","name","value","onClick","Modal","isOpen","modalTransition","timeout","backdropTransition","toggle","ModalHeader","ModalBody","Input","type","onChange","placeholder","rows","ModalFooter","Button","handleAddTask","color","NewBoardForm","createBoardModal","setCreateBoardModal","board","setBoard","handleAddBoard","MoveTaskButtonLeft","onMoveButtonClick","MoveTaskButtonRight","MoveTaskButtonDown","MoveTaskButtonUp","DeleteButton","onDeleteButtonClick","class","EditTaskForm","handleEditTask","editTaskModal","setEditTaskModal","editTask","setEditTask","id","taskTitle","taskBody","SingleTaskCard","boardName","taskId","handleHorizontalTaskMove","handleVerticalTaskMove","handleTaskDelete","direction","SingleBoard","toUpperCase","boardTasks","map","args","BoardCollection","tasks","tasksInitial","uuidv4","App","setTasks","console","log","rearranged","arr_","arr","si","findIndex","el","prev","curr","swapUp","length","swapDown","newTask","updatedTodoTasks","find","todoTasksIndex","push","newTaskList","splice","updatedBoardList","boardIndex","updatedTasks","taskToMove","filter","taskIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d30d9f4b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input } from 'reactstrap';\n\nfunction NewTaskForm (props) {\n    const {\n        className\n    } = props;\n\n    const [createTaskModal, setCreateTaskModal] = useState(false);\n    const [task, setTask] = useState({});\n\n    const toggleModal = () => {\n        setCreateTaskModal(!createTaskModal);\n        setTask({});\n    }\n\n    const onTaskChange = (ev) => {\n        const {name, value} = ev.target;\n        setTask({...task, [name]: value});\n    }\n\n    const onAddTaskButtonClick = () => {\n        props.handleAddTask(task);\n        setCreateTaskModal(!createTaskModal);\n    }\n\n    return (\n        <div>\n            <div className={\"createNewTaskButton\"} onClick={toggleModal}><i className=\"fa fa-plus fa-lg create-icon\"></i>Create Task</div>\n            <Modal isOpen={createTaskModal} modalTransition={{ timeout: 700 }} backdropTransition={{ timeout: 1300 }}\n                   toggle={toggleModal} className={className}>\n                <ModalHeader toggle={toggleModal}>Create New Task</ModalHeader>\n                <ModalBody>\n                    <Input className={\"taskTitleInput\"} type=\"text\" name={\"taskTitle\"} onChange={onTaskChange} placeholder=\"Task Title ...\" />\n                    <Input type=\"textarea\" name={\"taskBody\"} onChange={onTaskChange} placeholder=\"Task Description ...\" rows={5} />\n                </ModalBody>\n                <ModalFooter>\n                    <Button className={\"addTaskButton-modal\"} onClick={onAddTaskButtonClick}>Add Task</Button>\n                    <Button color=\"secondary\" onClick={toggleModal}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n        </div>\n    );\n}\n\nexport default NewTaskForm;","import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input } from 'reactstrap';\n\nfunction NewBoardForm (props) {\n    const {\n        className\n    } = props;\n\n    const [createBoardModal, setCreateBoardModal] = useState(false);\n    const [board, setBoard] = useState({});\n\n    const toggleModal = () => {\n        setCreateBoardModal(!createBoardModal);\n        setBoard({});\n    }\n\n    const onBoardChange = (ev) => {\n        const {name, value} = ev.target;\n        setBoard({[name]: value});\n    }\n\n    const onAddBoardButtonClick = () => {\n        props.handleAddBoard(board);\n        setCreateBoardModal(!createBoardModal);\n    }\n\n    return (\n        <div>\n            <div className={\"createNewBoardButton\"} onClick={toggleModal}><i className=\"fa fa-plus fa-lg create-icon\"></i>Create Workflow Column</div>\n            <Modal isOpen={createBoardModal} modalTransition={{ timeout: 700 }} backdropTransition={{ timeout: 1300 }}\n                   toggle={toggleModal} className={className}>\n                <ModalHeader toggle={toggleModal}>Create New Workflow Column</ModalHeader>\n                <ModalBody>\n                    <Input className={\"boardTitleInput\"} type=\"text\" name={\"boardName\"} onChange={onBoardChange} placeholder=\"Workflow Column Title ...\" />\n                </ModalBody>\n                <ModalFooter>\n                    <Button className={\"addBoardButton-modal\"} onClick={onAddBoardButtonClick}>Add Column</Button>\n                    <Button color=\"secondary\" onClick={toggleModal}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n        </div>\n    );\n}\n\nexport default NewBoardForm;","import React from 'react';\n\nfunction MoveTaskButtonLeft({onMoveButtonClick}) {\n    return (\n        <div className={\"moveTaskButton--left moveTaskButton--color\"} onClick={onMoveButtonClick}>\n            <i className=\"fa fa-angle-double-left fa-2x\"></i>\n        </div>\n    );\n}\n\nexport default MoveTaskButtonLeft;","import React from 'react';\n\nfunction MoveTaskButtonRight({onMoveButtonClick}) {\n    return (\n        <div className={\"moveTaskButton--right moveTaskButton--color\"} onClick={onMoveButtonClick}>\n            <i className=\"fa fa-angle-double-right fa-2x\"></i>\n        </div>\n    );\n}\n\nexport default MoveTaskButtonRight;","import React from 'react';\n\nfunction MoveTaskButtonDown({onMoveButtonClick}) {\n    return (\n        <div className={\"moveTaskButton--down moveTaskButton--color\"} onClick={onMoveButtonClick}>\n            <i className=\"fa fa-angle-double-down fa-2x\"></i>\n        </div>\n    );\n}\n\nexport default MoveTaskButtonDown;","import React from 'react';\n\nfunction MoveTaskButtonUp({onMoveButtonClick}) {\n    return (\n        <div className={\"moveTaskButton--up moveTaskButton--color\"} onClick={onMoveButtonClick}>\n            <i className=\"fa fa-angle-double-up fa-2x\"></i>\n        </div>\n    );\n}\n\nexport default MoveTaskButtonUp;","import React from 'react';\n\nfunction DeleteButton({onDeleteButtonClick}) {\n    return (\n        <div className={\"deleteButton\"} onClick={onDeleteButtonClick}>\n            <i class=\"fa fa-trash fa-lg\"></i>\n        </div>\n    );\n}\n\nexport default DeleteButton;","import React, { useState, useEffect } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input } from 'reactstrap';\n\nfunction EditTaskForm ({className, task, handleEditTask}) {\n\n    const [editTaskModal, setEditTaskModal] = useState(false);\n    const [editTask, setEditTask] = useState(task);\n\n    const toggleModal = () => {\n        setEditTaskModal(!editTaskModal);\n        setEditTask({});\n    }\n\n    const onTaskChange = (ev) => {\n        const {name, value} = ev.target;\n        setEditTask({...editTask, [name]: value, id: task.id});\n    }\n\n    const onEditTaskButtonClick = () => {\n        handleEditTask(editTask);\n        setEditTaskModal(!editTaskModal);\n    }\n\n    return (\n        <div className={\"editTask\"}>\n            <div className={\"editTaskButton\"} onClick={toggleModal}><i className=\"fa fa-edit fa-lg\"></i></div>\n            <Modal isOpen={editTaskModal} modalTransition={{ timeout: 700 }} backdropTransition={{ timeout: 1300 }}\n                   toggle={toggleModal} className={className}>\n                <ModalHeader toggle={toggleModal}>Edit Current Task</ModalHeader>\n                <ModalBody>\n                    <Input className={\"taskTitleInput\"} value={editTask.taskTitle || '' || task.taskTitle} type=\"text\" name={\"taskTitle\"} onChange={onTaskChange} />\n                    <Input type=\"textarea\" value={editTask.taskBody || '' || task.taskBody} name={\"taskBody\"} onChange={onTaskChange} rows={5} />\n                </ModalBody>\n                <ModalFooter>\n                    <Button className={\"addTaskButton-modal\"} onClick={onEditTaskButtonClick}>Save Task</Button>\n                    <Button color=\"secondary\" onClick={toggleModal}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n        </div>\n    );\n}\n\nexport default EditTaskForm;","import React from 'react';\nimport MoveTaskButtonLeft from \"./taskButtons/MoveTaskButtonLeft\";\nimport MoveTaskButtonRight from \"./taskButtons/MoveTaskButtonRight\";\nimport MoveTaskButtonDown from \"./taskButtons/MoveTaskButtonDown\";\nimport MoveTaskButtonUp from \"./taskButtons/MoveTaskButtonUp\";\nimport DeleteButton from './taskButtons/DeleteTaskButton';\nimport EditTaskForm from './EditTaskForm';\n\nfunction SingleTaskCard({taskTitle, boardName, taskId, handleHorizontalTaskMove, handleVerticalTaskMove, handleTaskDelete, handleEditTask, task}) {\n\n    return (\n        <div className={\"SingleTaskCard\"}>\n            <div className={\"taskTitle\"}>{taskTitle}</div>\n                <EditTaskForm\n                    task={task}\n                    handleEditTask={(editTask) => handleEditTask({\n                        editTask: editTask,\n                        boardName: boardName,\n                    })}\n                />\n                <MoveTaskButtonLeft\n                    onMoveButtonClick={() => handleHorizontalTaskMove({\n                        taskId : taskId,\n                        direction: 'left',\n                        boardName: boardName,\n                    })}\n                />\n                <MoveTaskButtonRight\n                    onMoveButtonClick={() => handleHorizontalTaskMove({\n                        taskId : taskId,\n                        direction: 'right',\n                        boardName: boardName,\n                    })}\n                />\n                <MoveTaskButtonUp\n                    onMoveButtonClick={() => handleVerticalTaskMove({\n                        taskId : taskId,\n                        direction: 'up',\n                        boardName: boardName,\n                    })}\n                />\n                <MoveTaskButtonDown\n                    onMoveButtonClick={() => handleVerticalTaskMove({\n                        taskId : taskId,\n                        direction: 'down',\n                        boardName: boardName,\n                    })}\n                />\n                <DeleteButton\n                    onDeleteButtonClick={() => handleTaskDelete({\n                        taskId : taskId,\n                        boardName: boardName,\n                    })}\n                />\n        </div>\n    );\n}\n\nexport default SingleTaskCard;","import React from 'react';\nimport SingleTaskCard from \"./SingleTaskCard\";\nimport 'bootstrap/dist/css/bootstrap-grid.min.css';\n\n\nfunction SingleBoard ({board, handleHorizontalTaskMove, handleVerticalTaskMove, handleTaskDelete, handleEditTask}) {\n\n    return (\n        <div className={\"taskStatusSection\"}>\n            <div className={\"taskStatusSection-title\"}>{board.boardName.toUpperCase()}</div>\n            <div className={`titleLine bg-${board.color}`}></div>\n            {\n                board.boardTasks.map(task => (\n                    <SingleTaskCard\n                        task={task}\n                        taskTitle={task.taskTitle}\n                        boardName={board.boardName}\n                        taskId={task.id}\n                        handleHorizontalTaskMove={(args) => handleHorizontalTaskMove(args)}\n                        handleVerticalTaskMove={(args) => handleVerticalTaskMove(args)}\n                        handleTaskDelete={(args) => handleTaskDelete(args)}\n                        handleEditTask={(args) => handleEditTask(args)}\n                    />\n                ))\n            }\n        </div>\n    );\n}\n\nexport default SingleBoard;","import React from 'react';\nimport SingleBoard from \"./SingleBoard\";\n\nfunction BoardCollection ({tasks, handleHorizontalTaskMove, handleVerticalTaskMove, handleTaskDelete, handleEditTask}) {\n\n    return (\n        <div className={\"boardBody\"}>\n            {\n                tasks.map(board => (\n                    <SingleBoard\n                        board={board}\n                        handleHorizontalTaskMove={(args) => handleHorizontalTaskMove(args)}\n                        handleVerticalTaskMove={(args) => handleVerticalTaskMove(args)}\n                        handleTaskDelete={(args) => handleTaskDelete(args)}\n                        handleEditTask={(args) => handleEditTask(args)}\n                    />\n                ))\n            }\n        </div>\n    );\n}\n\nexport default BoardCollection;","import React, {useState} from 'react';\nimport './App.css';\nimport NewTaskForm from \"./components/createNewTask/NewTaskForm\";\nimport NewBoardForm from \"./components/boardBody/NewBoardForm\";\nimport BoardCollection from \"./components/boardBody/BoardCollection\";\nimport {v4 as uuidv4} from 'uuid';\n\nconst tasksInitial = [\n    {\n        boardName: 'todo',\n        color: 'secondary',\n        boardTasks: [\n            {\n                id: uuidv4(),\n                taskTitle: 'todo 1',\n                taskBody: 'do stuff'\n            },\n            {\n                id: uuidv4(),\n                taskTitle: 'todo 12',\n                taskBody: 'do stuff'\n            },\n            {\n                id: uuidv4(),\n                taskTitle: 'todo 2',\n                taskBody: 'Fix drag and drop'\n            }\n        ],\n    },\n    {\n        boardName: 'progress',\n        color: 'primary',\n        boardTasks: [\n            {\n                id: uuidv4(),\n                taskTitle: 'todo 3',\n                taskBody: 'Add drag event handlers'\n            }\n        ],\n    },\n    {\n        boardName: 'review',\n        color: 'warning',\n        boardTasks: [\n            {\n                id: uuidv4(),\n                taskTitle: 'todo 4',\n                taskBody: 'do stuff'\n            }\n        ],\n    },\n    {\n        boardName: 'done',\n        color: 'success',\n        boardTasks: [\n            {\n                id: uuidv4(),\n                taskTitle: 'todo 5',\n                taskBody: 'do stuff'\n            }\n        ],\n    },\n];\n\nfunction App() {\n\n    const [tasks, setTasks] = useState(tasksInitial);\n\n    const handleAddBoard = (board) => {\n        const updatedBoardList = [...tasks];\n        updatedBoardList.push({...board, color: 'primary', boardTasks: []});\n        setTasks(updatedBoardList);\n    }\n\n    const handleAddTask = (newTask) => {\n        const updatedTodoTasks = tasks.find(board => board.boardName === 'todo');\n        const todoTasksIndex = tasks.findIndex(board => board.boardName === 'todo');\n\n        updatedTodoTasks.boardTasks.push({id: uuidv4(), ...newTask});\n\n        const newTaskList = [...tasks];\n        newTaskList.splice(todoTasksIndex, 1, {...updatedTodoTasks});\n\n        setTasks(newTaskList);\n    }\n\n    const handleTaskDelete = (args) => {\n        const boardIndex = tasks.findIndex(board => board.boardName === args.boardName);\n\n        const updatedTasks = [...tasks];\n        updatedTasks[boardIndex].boardTasks = updatedTasks[boardIndex].boardTasks.filter(el => el.id !== args.taskId);\n\n        setTasks(updatedTasks);\n    }\n\n    const handleEditTask = (args) => {\n        const boardIndex = tasks.findIndex(board => board.boardName === args.boardName);\n        const updatedTasks = [...tasks];\n        updatedTasks[boardIndex].boardTasks.map(task => console.log(task.id));\n        const taskIndex = updatedTasks[boardIndex].boardTasks.findIndex( task => task.id === args.editTask.id);\n        updatedTasks[boardIndex].boardTasks[taskIndex] = args.editTask;\n        console.log(updatedTasks[boardIndex].boardTasks.filter(task => task.id === args.editTask.id));\n\n        setTasks(updatedTasks);\n    }\n\n    const handleHorizontalTaskMove = (args) => {\n        const boardIndex = tasks.findIndex(board => board.boardName === args.boardName);\n\n        if (args.direction === 'left' && boardIndex <= 0) return;\n        if ((args.direction === 'right' && boardIndex === tasks.length - 1) || boardIndex < 0) return;\n\n        const updatedTasks = [...tasks];\n        const taskToMove = updatedTasks[boardIndex].boardTasks.find(el => el.id === args.taskId);\n\n        updatedTasks[boardIndex].boardTasks = updatedTasks[boardIndex].boardTasks.filter(el => el.id !== args.taskId);\n\n        if (args.direction === 'left') updatedTasks[boardIndex - 1].boardTasks.push(taskToMove);\n        if (args.direction === 'right') updatedTasks[boardIndex + 1].boardTasks.push(taskToMove);\n\n        setTasks(updatedTasks);\n    }\n\n    const handleVerticalTaskMove = (args) => {\n        console.log(args);\n        const rearranged = tasks.map(board => {\n            if (board.boardName === args.boardName) {\n                const boardTasks = args.direction === 'up'\n                    ? swapUp(board.boardTasks, args.taskId)\n                    : swapDown(board.boardTasks, args.taskId);\n\n                return {...board, boardTasks};\n            } else return board;\n        });\n        setTasks(rearranged);\n    }\n\n    function swapUp(arr_, id) {\n        const arr = [...arr_];\n        let si = arr.findIndex(el => el.id === id);\n        if (si <= 0) return arr;\n        const prev = arr[si - 1];\n        const curr = arr[si];\n        arr[si] = prev;\n        arr[si - 1] = curr;\n        return arr;\n    }\n\n    function swapDown(arr_, id) {\n        const arr = [...arr_];\n        let si = arr.findIndex(el => el.id === id);\n        if (si >= arr.length - 1) return arr;\n        const prev = arr[si + 1];\n        const curr = arr[si];\n        arr[si] = prev;\n        arr[si + 1] = curr;\n        return arr;\n    }\n\n    return (\n        <div className=\"App\">\n            <div className={\"appHeader\"}>Kanban Style Task Board</div>\n            <div className={\"appSubHeader\"}>Concentrate on task completion instead of remembering what they are, we'll\n                do this part for you\n            </div>\n            <NewTaskForm\n                handleAddTask={(task) => handleAddTask(task)}\n            />\n            <NewBoardForm\n                handleAddBoard={(board) => handleAddBoard(board)}\n            />\n            <BoardCollection\n                tasks={tasks}\n                handleHorizontalTaskMove={(args) => handleHorizontalTaskMove(args)}\n                handleVerticalTaskMove={(args) => handleVerticalTaskMove(args)}\n                handleTaskDelete={(args) => handleTaskDelete(args)}\n                handleEditTask={(args) => handleEditTask(args)}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}